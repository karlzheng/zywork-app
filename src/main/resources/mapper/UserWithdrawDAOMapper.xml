<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.zywork.dao.UserWithdrawDAO">

    <insert id="saveWithdraw">
        <!-- 只有当可用余额大于等于提现金额加所有未完成的提现金额时才可申请提现 -->
        insert into t_funds_withdraw(user_id, transaction_no, amount, bankcard_id, withdraw_status)
        select #{userId}, #{transactionNo}, #{amount}, #{bankcardId}, 0 from dual
        where exists(
				select t_user_wallet.usable_rmb_balance as usableRmbBalance,
				(select ifnull(sum(t_funds_withdraw.amount), 0)
				from t_funds_withdraw where t_funds_withdraw.user_id = #{userId} and t_funds_withdraw.complete_time is null) as withdrawAmount
				from t_user_wallet where t_user_wallet.id = #{userId}
				having usableRmbBalance - withdrawAmount <![CDATA[>=]]> #{amount})
    </insert>

    <update id="updateWithdrawCheck">
        update t_funds_withdraw
        <set>
            withdraw_status = #{withdrawStatus},
            <if test="description != null and description != ''">
                withdraw_description = #{description},
            </if>
            <!-- 如果未通过，需要设置完成时间 -->
            <if test="withdrawStatus == 2">
                complete_time = CURRENT_TIMESTAMP,
            </if>
            checked_user_id = #{checkedUserId},
            checked_time = CURRENT_TIMESTAMP,
            version = version + 1,
            update_time = CURRENT_TIMESTAMP,
        </set>
        where transaction_no = #{transactionNo} and version + 1 <![CDATA[<=]]> #{newVersion}
        <!-- 如果审核通过，则需要判断只有当提现金额小于等于可用余额时才能通过 -->
        <if test="withdrawStatus == 1">
            and amount <![CDATA[<=]]> (select t_user_wallet.usable_rmb_balance from t_user_wallet where t_user_wallet.id = #{userId})
        </if>
    </update>

    <insert id="saveWithdrawCheck">
        insert into t_funds_withdraw_check(withdraw_id, transaction_no, withdraw_status, withdraw_description, checked_user_id)
        values(#{withdrawId}, #{transactionNo}, #{withdrawStatus}, #{description}, #{checkedUserId})
    </insert>

    <update id="updateWithdraw">
        update t_funds_withdraw set
        withdraw_status = #{withdrawStatus},
        complete_time = CURRENT_TIMESTAMP,
        version = version + 1,
        update_time = CURRENT_TIMESTAMP
        where transaction_no = #{transactionNo} and version + 1 <![CDATA[<=]]> #{newVersion}
    </update>

    <select id="getAvailableWithdraw" parameterType="long" resultType="long">
        select t_user_wallet.usable_rmb_balance -
        (select ifnull(sum(t_funds_withdraw.amount), 0) from t_funds_withdraw where t_funds_withdraw.user_id = #{userId} and t_funds_withdraw.complete_time is null)
		as availabeWithdraw
	    from t_user_wallet where t_user_wallet.id = #{userId}
    </select>

    <select id="getByTransactionNo" parameterType="string" resultType="userWithdrawDO">
        select id, user_id, amount, withdraw_status, version from t_funds_withdraw where transaction_no = #{transactionNo}
    </select>

</mapper>
